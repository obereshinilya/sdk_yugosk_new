'use strict';Object.defineProperty(exports,'__esModule',{value:true});var moment=require('moment');function _interopDefaultLegacy(e){return e&&typeof e==='object'&&'default'in e?e:{'default':e}}var moment__default=/*#__PURE__*/_interopDefaultLegacy(moment);//
var script = {
  name: "VueEnglishdatepicker",
  // vue component name
  props: {
    value: {
      type: String,
      default: ""
    },
    format: {
      type: String,
      default: "YYYY-MM-DD"
    },
    classValue: {
      type: String,
      default: ""
    },
    placeholder: {
      type: String,
      default: ""
    },
    yearSelect: {
      type: Boolean,
      default: true
    },
    monthSelect: {
      type: Boolean,
      default: true
    }
  },
  model: {
    event: "change"
  },
  data: function data() {
    return {
      date: moment__default['default'](this.value || moment__default['default'](), this.format),
      formatedValue: this.value,
      visible: false,
      startingYear: 1940,
      numberofYears: 100,
      endDay: null,
      yearValue: this.value == "" ? moment__default['default']().year() : moment__default['default'](this.value).year(),
      monthValue: this.value == "" ? moment__default['default']().month() : moment__default['default'](this.value).month(),
      startMonthValue: null,
      currentDateValue: undefined
    };
  },
  computed: {
    getMonthsList: function getMonthsList() {
      return moment__default['default'].months();
    },
    year: function year() {
      return this.date.year();
    },
    month: function month() {
      return this.date.month();
    },
    weekdays: function weekdays() {
      return moment__default['default'].weekdaysMin();
    },
    days: function days() {
      var _this = this;

      var endDay = this.date.clone().endOf("month").date();
      return Array(endDay).fill().map(function (_, idx) {
        return moment__default['default']([_this.year, _this.date.month(), idx + 1]);
      });
    },
    startweek: function startweek() {
      return this.date.clone().startOf("month").day();
    },
    formatedYear: function formatedYear() {
      return this.date.format("YYYY");
    },
    formatedYearOrMonth: function formatedYearOrMonth() {
      if (this.monthSelect == false && this.yearSelect == false) {
        return this.date.format("MMMM YYYY");
      }

      if (this.monthSelect == false) {
        return this.date.format("MMMM");
      }

      if (this.yearSelect == false) {
        return this.date.format("YYYY");
      }

      return "";
    },
    formatedDate: function formatedDate() {
      return this.date.format("dddd, DD MMMM");
    }
  },
  methods: {
    active: function active(date) {
      return this.date.unix() === date.unix();
    },
    monthSelectChange: function monthSelectChange() {
      this.date = moment__default['default']([this.year, this.monthValue]);
    },
    yearSelectChange: function yearSelectChange() {
      this.date = moment__default['default']([this.yearValue, this.month]);
    },
    next: function next() {
      var _month = this.date.month() + 1;

      var _year = this.year;

      if (_month > 11) {
        _year++;
        _month = 0;
      }

      this.setMonthAndYear(_month, _year);
      this.date = moment__default['default']([_year, _month]);
    },
    prev: function prev() {
      var _month = this.date.month() - 1;

      var _year = this.year;

      if (_month < 0) {
        _year--;
        _month = 11;
      }

      this.setMonthAndYear(_month, _year);
      this.date = moment__default['default']([_year, _month]);
    },
    select: function select(date) {
      this.date = date;
      this.formatedValue = this.date.format(this.format);
      this.$emit("change", this.formatedValue);
      this.hide();
    },
    show: function show() {
      var _this2 = this;

      this.visible = true;
      setTimeout(function () {
        return document.addEventListener("click", _this2.hide);
      }, 200);
    },
    hide: function hide() {
      this.visible = false;
      document.removeEventListener("click", this.hide);
    },
    today: function today() {
      this.select(moment__default['default']());
      this.setMonthAndYear(this.date.month(), this.date.year());
    },
    checkToday: function checkToday(date) {
      var today = moment__default['default']();
      return date.date() == today.date() && date.year() == today.year() && date.month() == today.month();
    },
    setMonthAndYear: function setMonthAndYear(month, year) {
      this.monthValue = month;
      this.yearValue = year;
    }
  }
};function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
        createInjectorSSR = createInjector;
        createInjector = shadowMode;
        shadowMode = false;
    }
    // Vue.extend constructor export interop.
    const options = typeof script === 'function' ? script.options : script;
    // render functions
    if (template && template.render) {
        options.render = template.render;
        options.staticRenderFns = template.staticRenderFns;
        options._compiled = true;
        // functional template
        if (isFunctionalTemplate) {
            options.functional = true;
        }
    }
    // scopedId
    if (scopeId) {
        options._scopeId = scopeId;
    }
    let hook;
    if (moduleIdentifier) {
        // server build
        hook = function (context) {
            // 2.3 injection
            context =
                context || // cached call
                    (this.$vnode && this.$vnode.ssrContext) || // stateful
                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
            // 2.2 with runInNewContext: true
            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                context = __VUE_SSR_CONTEXT__;
            }
            // inject component styles
            if (style) {
                style.call(this, createInjectorSSR(context));
            }
            // register component module identifier for async chunk inference
            if (context && context._registeredComponents) {
                context._registeredComponents.add(moduleIdentifier);
            }
        };
        // used by ssr in case component is cached and beforeCreate
        // never gets called
        options._ssrRegister = hook;
    }
    else if (style) {
        hook = shadowMode
            ? function (context) {
                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
            }
            : function (context) {
                style.call(this, createInjector(context));
            };
    }
    if (hook) {
        if (options.functional) {
            // register for functional component in vue file
            const originalRender = options.render;
            options.render = function renderWithStyleInjection(h, context) {
                hook.call(context);
                return originalRender(h, context);
            };
        }
        else {
            // inject component registration as beforeCreate hook
            const existing = options.beforeCreate;
            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
    }
    return script;
}function createInjectorSSR(context) {
    if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__;
    }
    if (!context)
        return () => { };
    if (!('styles' in context)) {
        context._styles = context._styles || {};
        Object.defineProperty(context, 'styles', {
            enumerable: true,
            get: () => context._renderStyles(context._styles)
        });
        context._renderStyles = context._renderStyles || renderStyles;
    }
    return (id, style) => addStyle(id, style, context);
}
function addStyle(id, css, context) {
    const group =  css.media || 'default' ;
    const style = context._styles[group] || (context._styles[group] = { ids: [], css: '' });
    if (!style.ids.includes(id)) {
        style.media = css.media;
        style.ids.push(id);
        let code = css.source;
        style.css += code + '\n';
    }
}
function renderStyles(styles) {
    let css = '';
    for (const key in styles) {
        const style = styles[key];
        css +=
            '<style data-vue-ssr-id="' +
                Array.from(style.ids).join(' ') +
                '"' +
                (style.media ? ' media="' + style.media + '"' : '') +
                '>' +
                style.css +
                '</style>';
    }
    return css;
}/* script */
var __vue_script__ = script;
/* template */

var __vue_render__ = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    staticClass: "datepicker",
    on: {
      "click": function click($event) {
        $event.stopPropagation();
      }
    }
  }, [_vm._ssrNode("<input type=\"text\"" + _vm._ssrAttr("placeholder", this.placeholder) + _vm._ssrAttr("value", _vm.formatedValue) + _vm._ssrClass(null, this.classValue) + " data-v-680835cc> "), _vm.visible ? _vm._ssrNode("<div" + _vm._ssrClass(null, ['calendar', {
    show: _vm.visible
  }]) + " data-v-680835cc>", "</div>", [_vm._ssrNode("<div class=\"calendar__header\" data-v-680835cc><div class=\"calendar__year\" data-v-680835cc>" + _vm._ssrEscape(_vm._s(_vm.formatedYear)) + "</div> <div class=\"calendar__date\" data-v-680835cc>" + _vm._ssrEscape(_vm._s(_vm.formatedDate)) + "</div></div> "), _vm._ssrNode("<div class=\"calendar__body\" data-v-680835cc>", "</div>", [_vm._ssrNode("<div class=\"calendar__month\" data-v-680835cc>", "</div>", [_vm._ssrNode("<button class=\"calendar__month__prev\" data-v-680835cc><b data-v-680835cc>&gt;</b></button> <span data-v-680835cc>" + _vm._ssrEscape(_vm._s(_vm.formatedYearOrMonth)) + "</span> "), this.monthSelect ? _c('select', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: _vm.monthValue,
      expression: "monthValue"
    }],
    on: {
      "change": [function ($event) {
        var $$selectedVal = Array.prototype.filter.call($event.target.options, function (o) {
          return o.selected;
        }).map(function (o) {
          var val = "_value" in o ? o._value : o.value;
          return val;
        });
        _vm.monthValue = $event.target.multiple ? $$selectedVal : $$selectedVal[0];
      }, _vm.monthSelectChange]
    }
  }, _vm._l(_vm.getMonthsList, function (month, index) {
    return _c('option', {
      key: month,
      staticStyle: {
        "text-align-last": "center"
      },
      attrs: {
        "label": month
      },
      domProps: {
        "value": index
      }
    });
  }), 0) : _vm._e(), _vm._ssrNode(" "), this.yearSelect ? _c('select', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: _vm.yearValue,
      expression: "yearValue"
    }],
    staticStyle: {
      "margin-left": "5px"
    },
    on: {
      "change": [function ($event) {
        var $$selectedVal = Array.prototype.filter.call($event.target.options, function (o) {
          return o.selected;
        }).map(function (o) {
          var val = "_value" in o ? o._value : o.value;
          return val;
        });
        _vm.yearValue = $event.target.multiple ? $$selectedVal : $$selectedVal[0];
      }, _vm.yearSelectChange]
    }
  }, _vm._l(_vm.numberofYears, function (i) {
    return _c('option', {
      key: i,
      staticStyle: {
        "text-align-last": "center"
      },
      attrs: {
        "label": _vm.startingYear + (i - 1)
      },
      domProps: {
        "value": _vm.startingYear + (i - 1)
      }
    });
  }), 0) : _vm._e(), _vm._ssrNode(" <button data-v-680835cc><b data-v-680835cc>&gt;</b></button>")], 2), _vm._ssrNode(" <div style=\"padding: 3px\" data-v-680835cc><div class=\"calendar__weeks\" data-v-680835cc>" + _vm._ssrList(_vm.weekdays, function (weekday, w) {
    return "<div class=\"calendar__weekday\" data-v-680835cc>" + _vm._ssrEscape("\n            " + _vm._s(weekday) + "\n          ") + "</div>";
  }) + "</div> <div class=\"calendar__days\" data-v-680835cc><div class=\"calendar__day_spacer\"" + _vm._ssrStyle(null, {
    gridColumn: "span " + _vm.startweek
  }, null) + " data-v-680835cc></div> " + _vm._ssrList(_vm.days, function (day, d) {
    return "<div" + _vm._ssrClass(null, ['calendar__day', {
      selected: _vm.active(day)
    }, {
      today: _vm.checkToday(day)
    }]) + " data-v-680835cc>" + _vm._ssrEscape("\n            " + _vm._s(day.date()) + "\n          ") + "</div>";
  }) + "</div></div>")], 2), _vm._ssrNode(" <div class=\"calendar__footer\" data-v-680835cc><button data-v-680835cc>Today</button></div>")], 2) : _vm._e()], 2);
};

var __vue_staticRenderFns__ = [];
/* style */

var __vue_inject_styles__ = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-680835cc_0", {
    source: "*[data-v-680835cc]{margin:0;box-sizing:border-box;font-family:\"Open Sans\",sans-serif}.datepicker[data-v-680835cc]{position:relative}.datepicker button[data-v-680835cc]{outline:0;border:0;background:0 0;cursor:pointer;transition:all .2s ease-in-out}.calendar[data-v-680835cc]{z-index:9;position:absolute;width:260px;top:100%;box-shadow:0 14px 45px rgba(0,0,0,.25),0 10px 18px rgba(0,0,0,.22);background:#fff;visibility:hidden;opacity:0}.calendar.show[data-v-680835cc]{visibility:visible;opacity:1}.calendar__header[data-v-680835cc]{padding:15px 10px;background:#5495c5;color:#fff}.calendar__year[data-v-680835cc]{opacity:.6;font-size:1rem;line-height:1.2rem}.calendar__date[data-v-680835cc]{font-size:1.2rem;line-height:1.5rem}.calendar__month[data-v-680835cc]{padding:5px 3px;display:flex;justify-content:space-between;align-items:center}.calendar__month select[data-v-680835cc]{height:28px;width:100px;border-radius:5px;border-color:#7ca3f1;text-align-last:center}.calendar__month button[data-v-680835cc]{width:25px;margin-right:4px;height:28px;margin-left:4px;border-radius:5px;color:#fff;text-align:center;background:#247ac4}.calendar__month button[data-v-680835cc]:hover{background:#663399}.calendar__month__prev[data-v-680835cc]{transform:rotate(180deg)}.calendar__days[data-v-680835cc],.calendar__weeks[data-v-680835cc]{display:grid;grid-template-columns:repeat(7,1fr)}.calendar__days[data-v-680835cc]{gap:4px}.calendar__day[data-v-680835cc],.calendar__weekday[data-v-680835cc]{text-align:center;font-size:12px}.calendar__weekday[data-v-680835cc]{opacity:.8;font-weight:300}.calendar__day[data-v-680835cc]{width:32px;height:32px;line-height:32px;font-weight:300;color:#1c94b8;font-weight:700;cursor:pointer;border-radius:5px;background:#dfeffc}.calendar__day.selected[data-v-680835cc]{background:#663399;color:#fff}.calendar__day.today[data-v-680835cc]{background:#f77777;color:#fff}.calendar__day[data-v-680835cc]:hover{background:#663399;color:#fff;opacity:.8}.calendar__footer[data-v-680835cc]{text-align:right}.calendar__footer button[data-v-680835cc]{padding:8px 10px;text-transform:uppercase;font-weight:700;color:#663399;opacity:.9}.calendar__footer button[data-v-680835cc]:hover{opacity:1}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__ = "data-v-680835cc";
/* module identifier */

var __vue_module_identifier__ = "data-v-680835cc";
/* functional template */

var __vue_is_functional_template__ = false;
/* style inject shadow dom */

var __vue_component__ = /*#__PURE__*/normalizeComponent({
  render: __vue_render__,
  staticRenderFns: __vue_staticRenderFns__
}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, undefined, createInjectorSSR, undefined);// Import vue component

var install = function installVueEnglishdatepicker(Vue) {
  if (install.installed) return;
  install.installed = true;
  Vue.component('VueEnglishdatepicker', __vue_component__);
}; // Create module definition for Vue.use()


var plugin = {
  install: install
}; // To auto-install on non-es builds, when vue is found
// eslint-disable-next-line no-redeclare

/* global window, global */

{
  var GlobalVue = null;

  if (typeof window !== 'undefined') {
    GlobalVue = window.Vue;
  } else if (typeof global !== 'undefined') {
    GlobalVue = global.Vue;
  }

  if (GlobalVue) {
    GlobalVue.use(plugin);
  }
} // Inject install function into component - allows component
// to be registered via Vue.use() as well as Vue.component()


__vue_component__.install = install; // Export component by default
// also be used as directives, etc. - eg. import { RollupDemoDirective } from 'rollup-demo';
// export const RollupDemoDirective = component;
exports.default=__vue_component__;